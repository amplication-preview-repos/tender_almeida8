/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchaseOrderHeaderService } from "../purchaseOrderHeader.service";
import { PurchaseOrderHeaderCreateInput } from "./PurchaseOrderHeaderCreateInput";
import { PurchaseOrderHeader } from "./PurchaseOrderHeader";
import { PurchaseOrderHeaderFindManyArgs } from "./PurchaseOrderHeaderFindManyArgs";
import { PurchaseOrderHeaderWhereUniqueInput } from "./PurchaseOrderHeaderWhereUniqueInput";
import { PurchaseOrderHeaderUpdateInput } from "./PurchaseOrderHeaderUpdateInput";

export class PurchaseOrderHeaderControllerBase {
  constructor(protected readonly service: PurchaseOrderHeaderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseOrderHeader })
  async createPurchaseOrderHeader(
    @common.Body() data: PurchaseOrderHeaderCreateInput
  ): Promise<PurchaseOrderHeader> {
    return await this.service.createPurchaseOrderHeader({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        createdDate: true,
        headerNumber: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseOrderHeader] })
  @ApiNestedQuery(PurchaseOrderHeaderFindManyArgs)
  async purchaseOrderHeaders(
    @common.Req() request: Request
  ): Promise<PurchaseOrderHeader[]> {
    const args = plainToClass(PurchaseOrderHeaderFindManyArgs, request.query);
    return this.service.purchaseOrderHeaders({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        createdDate: true,
        headerNumber: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseOrderHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchaseOrderHeader(
    @common.Param() params: PurchaseOrderHeaderWhereUniqueInput
  ): Promise<PurchaseOrderHeader | null> {
    const result = await this.service.purchaseOrderHeader({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        createdDate: true,
        headerNumber: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseOrderHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchaseOrderHeader(
    @common.Param() params: PurchaseOrderHeaderWhereUniqueInput,
    @common.Body() data: PurchaseOrderHeaderUpdateInput
  ): Promise<PurchaseOrderHeader | null> {
    try {
      return await this.service.updatePurchaseOrderHeader({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          createdDate: true,
          headerNumber: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseOrderHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchaseOrderHeader(
    @common.Param() params: PurchaseOrderHeaderWhereUniqueInput
  ): Promise<PurchaseOrderHeader | null> {
    try {
      return await this.service.deletePurchaseOrderHeader({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          createdDate: true,
          headerNumber: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
