/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseOrderHeader } from "./PurchaseOrderHeader";
import { PurchaseOrderHeaderCountArgs } from "./PurchaseOrderHeaderCountArgs";
import { PurchaseOrderHeaderFindManyArgs } from "./PurchaseOrderHeaderFindManyArgs";
import { PurchaseOrderHeaderFindUniqueArgs } from "./PurchaseOrderHeaderFindUniqueArgs";
import { CreatePurchaseOrderHeaderArgs } from "./CreatePurchaseOrderHeaderArgs";
import { UpdatePurchaseOrderHeaderArgs } from "./UpdatePurchaseOrderHeaderArgs";
import { DeletePurchaseOrderHeaderArgs } from "./DeletePurchaseOrderHeaderArgs";
import { PurchaseOrderHeaderService } from "../purchaseOrderHeader.service";
@graphql.Resolver(() => PurchaseOrderHeader)
export class PurchaseOrderHeaderResolverBase {
  constructor(protected readonly service: PurchaseOrderHeaderService) {}

  async _purchaseOrderHeadersMeta(
    @graphql.Args() args: PurchaseOrderHeaderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseOrderHeader])
  async purchaseOrderHeaders(
    @graphql.Args() args: PurchaseOrderHeaderFindManyArgs
  ): Promise<PurchaseOrderHeader[]> {
    return this.service.purchaseOrderHeaders(args);
  }

  @graphql.Query(() => PurchaseOrderHeader, { nullable: true })
  async purchaseOrderHeader(
    @graphql.Args() args: PurchaseOrderHeaderFindUniqueArgs
  ): Promise<PurchaseOrderHeader | null> {
    const result = await this.service.purchaseOrderHeader(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseOrderHeader)
  async createPurchaseOrderHeader(
    @graphql.Args() args: CreatePurchaseOrderHeaderArgs
  ): Promise<PurchaseOrderHeader> {
    return await this.service.createPurchaseOrderHeader({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PurchaseOrderHeader)
  async updatePurchaseOrderHeader(
    @graphql.Args() args: UpdatePurchaseOrderHeaderArgs
  ): Promise<PurchaseOrderHeader | null> {
    try {
      return await this.service.updatePurchaseOrderHeader({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseOrderHeader)
  async deletePurchaseOrderHeader(
    @graphql.Args() args: DeletePurchaseOrderHeaderArgs
  ): Promise<PurchaseOrderHeader | null> {
    try {
      return await this.service.deletePurchaseOrderHeader(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
